/* START LIBRARY DESCRIPTION *********************************************
MQTT.LIB

The DMQTT Project
Copyright (C) 2013  Tito Brasolin tito.brasolin(at)gmail.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

DESCRIPTION: MQTT Client Library written in Dynamic C for Rabbit

The following libraries must be #use'd in this order:
#use ucos2.lib  // Optional.
#use mqtt.lib

END DESCRIPTION **********************************************************/

/*** BeginHeader mqtt_state */
#ifndef __MQTT_LIB
#define __MQTT_LIB

#ifndef TCPCONFIG
   #define TCPCONFIG 1
#endif

// Required to properly support socket half-close
#define TCP_NO_CLOSE_ON_LAST_READ

#ifdef MQTT_DEBUG
   #define _mqtt_debug __debug
#else
   #define _mqtt_debug __nodebug
#endif

#ifndef MQTT_VERBOSE
   #define MQTT_VERBOSE 0
#endif

#include <stdint.h>

#define MQTT_PROTOCOL_VERSION 3

// The server rejects the client identifier if it is not between 1 and 23
// characters in length.
#define MQTT_CONF_CLIENTID_LENGTH 24

// It is recommended that user names are kept to 12 characters or fewer,
// but it is not required.
#ifndef MQTT_CONF_USERNAME_LENGTH
   #define MQTT_CONF_USERNAME_LENGTH 50
#endif

// It is recommended that passwords are kept to 12 characters or fewer,
// but it is not required.
#ifndef MQTT_CONF_PASSWORD_LENGTH
   #define MQTT_CONF_PASSWORD_LENGTH 33 // 32 character (MD5) + '\0'
#endif

#define MQTT_MSG_CONNECT       1<<4
#define MQTT_MSG_CONNACK       2<<4
#define MQTT_MSG_PUBLISH       3<<4
#define MQTT_MSG_PUBACK        4<<4
#define MQTT_MSG_PUBREC        5<<4
#define MQTT_MSG_PUBREL        6<<4
#define MQTT_MSG_PUBCOMP       7<<4
#define MQTT_MSG_SUBSCRIBE     8<<4
#define MQTT_MSG_SUBACK        9<<4
#define MQTT_MSG_UNSUBSCRIBE  10<<4
#define MQTT_MSG_UNSUBACK     11<<4
#define MQTT_MSG_PINGREQ      12<<4
#define MQTT_MSG_PINGRESP     13<<4
#define MQTT_MSG_DISCONNECT   14<<4

#define MQTT_DUP_FLAG   1<<3
#define MQTT_QOS0_FLAG  0<<1
#define MQTT_QOS1_FLAG  1<<1
#define MQTT_QOS2_FLAG  2<<1

#define MQTT_RETAIN_FLAG 1

#define MQTT_CLEAN_SESSION  1<<1
#define MQTT_WILL_FLAG      1<<2
#define MQTT_WILL_RETAIN    1<<5
#define MQTT_USERNAME_FLAG  1<<7
#define MQTT_PASSWORD_FLAG  1<<6

#define _TCP_SOCK_OF_MQTT(mqtt) (&(mqtt)->s)
#define _SOCK_OF_MQTT(mqtt) _TCP_SOCK(mqtt->socket_info)

#use "dcrtcp.lib"
typedef struct {
   void* socket_info; // Currently pointing to tcp_Socket instance ('s') below.
   tcp_Socket s;
   int (*send)(void* socket_info, const void far *buf, int count);
   char host[DNS_MAX_NAME]; // Null-terminated dotted ip address or host name.
   word port;
   // Connection info
   char clientid[MQTT_CONF_CLIENTID_LENGTH];
   // Auth fields
   char username[MQTT_CONF_USERNAME_LENGTH];
   char password[MQTT_CONF_PASSWORD_LENGTH];
   // Will topic
   uint8_t will_retain;
   uint8_t will_qos;
   uint8_t clean_session;
   // Management fields
   uint16_t seq;
   uint16_t alive;
} mqtt_broker_handle_t;

extern mqtt_broker_handle_t mqtt_state;
/*** EndHeader */

mqtt_broker_handle_t mqtt_state;

/*** BeginHeader */
/* START FUNCTION DESCRIPTION ********************************************
MQTTParseMessageType <MQTT.LIB>

SYNTAX:
   uint8_t MQTTParseMessageType(buffer);

SUMMARY:
   Extract the message type from buffer.

DESCRIPTION
   Implemented as a MACRO.

PARAMETER1:
   buffer - Pointer to the packet.

RETURN VALUE:
   Message Type.

END DESCRIPTION **********************************************************/
#define MQTTParseMessageType(buffer) ( *buffer & 0xF0 )

/* START FUNCTION DESCRIPTION ********************************************
MQTTParseMessageDuplicate <MQTT.LIB>

SYNTAX:
   uint8_t MQTTParseMessageDuplicate(buffer);

SUMMARY:
   Indicate if it is a duplicate packet.

DESCRIPTION
   Implemented as a MACRO.

PARAMETER1:
   buffer - Pointer to the packet.

RETURN VALUE:
   0 Not duplicate.
   !=0 Duplicate.

END DESCRIPTION **********************************************************/
#define MQTTParseMessageDuplicate(buffer) ( *buffer & 0x08 )

/* START FUNCTION DESCRIPTION ********************************************
MQTTParseMessageQos <MQTT.LIB>

SYNTAX:
   uint8_t MQTTParseMessageQos(buffer);

SUMMARY:
   Extract the message QoS level.

DESCRIPTION
   Implemented as a MACRO.

PARAMETER1:
   buffer - Pointer to the packet.

RETURN VALUE:
   QoS Level (0, 1 or 2).

END DESCRIPTION **********************************************************/
#define MQTTParseMessageQos(buffer) ( (*buffer & 0x06) >> 1 )

/* START FUNCTION DESCRIPTION ********************************************
MQTTParseMessageRetain <MQTT.LIB>

SYNTAX:
   uint8_t MQTTParseMessageRetain(buffer) ( *buffer & 0x01 );

SUMMARY:
   Indicate if this packet has a retain flag.

DESCRIPTION
   Implemented as a MACRO.

PARAMETER1:
   buffer - Pointer to the packet.

RETURN VALUE:
   0 Not duplicate.
   !=0 Duplicate.

END DESCRIPTION **********************************************************/
#define MQTTParseMessageRetain(buffer) ( *buffer & 0x01 )
/*** EndHeader */

/*** BeginHeader mqtt_write_string */
uint16_t mqtt_write_string(char* string, far uint8_t* buf, uint16_t pos);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_write_string <MQTT.LIB>
END DESCRIPTION **********************************************************/
uint16_t mqtt_write_string(char* string, far uint8_t* buf, uint16_t pos) {
   char* idp = string;
   uint16_t i = 0;
   pos += 2;
   while (*idp) {
      buf[pos++] = *idp++;
      i++;
   }
   buf[pos-i-2] = (i >> 8);
   buf[pos-i-1] = (i & 0xFF);
   return pos;
}

/*** BeginHeader mqtt_encode_len */
int mqtt_encode_len(char* buf, int len);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_encode_len <MQTT.LIB>

SYNTAX:
   int mqtt_encode_len(char* buf, int len);

DESCRIPTION:
   Encodes the message length according to the MQTT algorithm.

PARAMETER1:
   buf - The buffer into which the encoded data is written.
PARAMETER2:
   len - The length to be encoded.

RETURN VALUE:
   Number of bytes written to buffer.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_encode_len(char* buf, int len)
{
   int rc = 0;
   char d;

   do {
      d = len % 128;
      if (len /= 128) {
         d |= 0x80;
      }
      buf[rc++] = d;
   } while (len);

   return rc;
}

/*** BeginHeader mqtt_num_rem_len_bytes */
uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_num_rem_len_bytes <MQTT.LIB>

SYNTAX:
   uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf);

SUMMARY:
   Parse packet buffer for number of bytes in remaining length field.

DESCRIPTION:
   Given a packet, return number of bytes in remaining length field in MQTT
   fixed header. Can be from 1 - 4 bytes depending on length of message.

PARAMETER1:
   buf - Pointer to the packet.

RETURN VALUE:
   Number of bytes.

END DESCRIPTION **********************************************************/
_mqtt_debug
uint8_t mqtt_num_rem_len_bytes(const uint8_t* buf) {
   uint8_t num_bytes = 1;
   if ((buf[1] & 0x80) == 0x80) {
      num_bytes++;
      if ((buf[2] & 0x80) == 0x80) {
         num_bytes ++;
         if ((buf[3] & 0x80) == 0x80) {
            num_bytes ++;
         }
      }
   }
   return num_bytes;
}

/*** BeginHeader mqtt_parse_rem_len */
uint16_t mqtt_parse_rem_len(const uint8_t* buf);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_parse_rem_len <MQTT.LIB>

SYNTAX:
   uint16_t mqtt_parse_rem_len(const uint8_t* buf);

SUMMARY:
   Parse packet buffer for remaning length value.

DESCRIPTION:
   Given a packet, return remaining length value (in fixed header).

PARAMETER1:
   buf - Pointer to the packet.

RETURN VALUE:
   Remaining length.

END DESCRIPTION **********************************************************/
_mqtt_debug
uint16_t mqtt_parse_rem_len(const uint8_t* buf) {
   uint16_t multiplier = 1;
   uint16_t value = 0;
   uint8_t digit;

   buf++; // skip "flags" byte in fixed header

   do {
      digit = *buf;
      value += (digit & 127) * multiplier;
      multiplier *= 128;
      buf++;
   } while ((digit & 128) != 0);

   return value;
}

/*** BeginHeader mqtt_parse_msg_id */
uint8_t mqtt_parse_msg_id(const uint8_t* buf);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_parse_msg_id <MQTT.LIB>

SYNTAX:
   uint8_t mqtt_parse_msg_id(const uint8_t* buf);

SUMMARY:
   Parse packet buffer for message id.

PARAMETER1:
   buf - Pointer to the packet.

RETURN VALUE:
   Message id.

END DESCRIPTION **********************************************************/
_mqtt_debug
uint8_t mqtt_parse_msg_id(const uint8_t* buf) {
   uint8_t type = MQTTParseMessageType(buf);
   uint8_t qos = MQTTParseMessageQos(buf);
   uint8_t id = 0;

   if(type >= MQTT_MSG_PUBLISH && type <= MQTT_MSG_UNSUBACK) {
      if(type == MQTT_MSG_PUBLISH) {
         if(qos != 0) {
            // fixed header length + Topic (UTF encoded)
            // = 1 for "flags" byte + rlb for length bytes + topic size
            uint8_t rlb = mqtt_num_rem_len_bytes(buf);
            uint8_t offset = *(buf+1+rlb)<<8; // topic UTF MSB
            offset |= *(buf+1+rlb+1);         // topic UTF LSB
            offset += (1+rlb+2);              // fixed header + topic size
            id = *(buf+offset)<<8;            // id MSB
            id |= *(buf+offset+1);            // id LSB
         }
      } else {
         // fixed header length
         // 1 for "flags" byte + rlb for length bytes
         uint8_t rlb = mqtt_num_rem_len_bytes(buf);
         id = *(buf+1+rlb)<<8;        // id MSB
         id |= *(buf+1+rlb+1);        // id LSB
      }
   }
   return id;
}

/*** BeginHeader mqtt_parse_pub_topic */
uint16_t mqtt_parse_pub_topic(const uint8_t* buf, uint8_t* topic);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_parse_pub_topic <MQTT.LIB>

SYNTAX:
   uint16_t mqtt_parse_pub_topic(const uint8_t* buf, uint8_t* topic);

SUMMARY:
   Parse a packet buffer for the publish topic.

DESCRIPTION:
   Given a packet containing an MQTT publish message,
   return the message topic.

PARAMETER1:
   buf - Pointer to the packet.
PARAMETER2:
   topic - Pointer destination buffer for topic.

RETURN VALUE:
   Size in bytes of topic (0 = no publish message in buffer).

END DESCRIPTION **********************************************************/
_mqtt_debug
uint16_t mqtt_parse_pub_topic(const uint8_t* buf, uint8_t* topic) {
   const uint8_t* ptr;
   uint16_t topic_len = mqtt_parse_pub_topic_ptr(buf, &ptr);

   if(topic_len != 0 && ptr != NULL) {
      memcpy(topic, ptr, topic_len);
   }

   return topic_len;
}

/*** BeginHeader mqtt_parse_pub_topic_ptr */
uint16_t mqtt_parse_pub_topic_ptr(const uint8_t* buf, const uint8_t **topic_ptr);
/*** EndHeader  */
/** Parse a packet buffer for a pointer to the publish topic.
 *
 *  Not called directly - called by mqtt_parse_pub_topic
 */
_mqtt_debug
uint16_t mqtt_parse_pub_topic_ptr(const uint8_t* buf, const uint8_t **topic_ptr) {
   uint16_t len = 0;

   if(MQTTParseMessageType(buf) == MQTT_MSG_PUBLISH) {
      // Fixed header length = 1 for "flags" byte + rlb for length bytes.
      uint8_t rlb = mqtt_num_rem_len_bytes(buf);
      len = *(buf+1+rlb)<<8;	// MSB of topic UTF
      len |= *(buf+1+rlb+1);	// LSB of topic UTF
      // Start of topic = add 1 for "flags", rlb for remaining length, 2 for UTF.
      *topic_ptr = (buf + (1+rlb+2));
   } else {
      *topic_ptr = NULL;
   }
   return len;
}

/*** BeginHeader mqtt_parse_publish_msg */
uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_parse_publish_msg <MQTT.LIB>

SYNTAX:
   uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg);

SUMMARY:
   Parse a packet buffer for the publish message.

DESCRIPTION:
   Given a packet containing an MQTT publish message,
   return the message.

PARAMETER1:
   buf - Pointer to the packet.
PARAMETER2:
   topic - Pointer destination buffer for message.

RETURN VALUE:
   Size in bytes of topic (0 = no publish message in buffer).

END DESCRIPTION **********************************************************/
_mqtt_debug
uint16_t mqtt_parse_publish_msg(const uint8_t* buf, uint8_t* msg) {
	const uint8_t* ptr;

	//printf("mqtt_parse_publish_msg\n");

	uint16_t msg_len = mqtt_parse_pub_msg_ptr(buf, &ptr);

	if(msg_len != 0 && ptr != NULL) {
		memcpy(msg, ptr, msg_len);
	}

	return msg_len;
}

/*** BeginHeader mqtt_parse_pub_msg_ptr */
uint16_t mqtt_parse_pub_msg_ptr(const uint8_t* buf, const uint8_t **msg_ptr);
/*** EndHeader  */
/** Parse a packet buffer for a pointer to the publish message.
 *
 *  Not called directly - called by mqtt_parse_pub_msg
 */
_mqtt_debug
uint16_t mqtt_parse_pub_msg_ptr(const uint8_t* buf, const uint8_t **msg_ptr) {
   uint16_t len = 0;

   if(MQTTParseMessageType(buf) == MQTT_MSG_PUBLISH) {
      // message starts at
      // fixed header length + Topic (UTF encoded) + msg id (if QoS>0)
      uint8_t rlb = mqtt_num_rem_len_bytes(buf);
      uint8_t offset = (*(buf+1+rlb))<<8;  // topic UTF MSB
      offset |= *(buf+1+rlb+1);            // topic UTF LSB
      offset += (1+rlb+2);                 // fixed header + topic size

      if(MQTTParseMessageQos(buf)) {
         offset += 2;                      // add two bytes of msg id
      }

      *msg_ptr = (buf + offset);

      // offset is now pointing to start of message
      // length of the message is remaining length - variable header
      // variable header is offset - fixed header
      // fixed header is 1 + rlb
      // so, lom = remlen - (offset - (1+rlb))
      len = mqtt_parse_rem_len(buf) - (offset-(rlb+1));
   } else {
      *msg_ptr = NULL;
   }
   return len;
}

/*** BeginHeader mqtt_init */
void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_init <MQTT.LIB>

SYNTAX:
   void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid);

DESCRIPTION:
   Initialize the information to connect to the broker.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   clientid - A string that identifies the client id.

END DESCRIPTION **********************************************************/
_mqtt_debug
void mqtt_init(mqtt_broker_handle_t* broker, const char* clientid) {
   memset(broker, 0, sizeof(*broker));
   // Socket info.
   broker->socket_info = _TCP_SOCK_OF_MQTT(broker);
   // Connection options
   broker->alive = 300; // 300 seconds = 5 minutes
   broker->seq = 1; // Sequency for message indetifiers
   // Client options
   if(clientid && *clientid) {
      strncpy(broker->clientid, clientid, sizeof(broker->clientid)-1);
   } else {
      // Canonical abbreviated Device ID.
      snprintf(broker->clientid, sizeof(broker->clientid),
         "%02X%02X%02XFF-FF%02X%02X%02X",
         SysIDBlock.macAddr[0], SysIDBlock.macAddr[1], SysIDBlock.macAddr[2],
         SysIDBlock.macAddr[3], SysIDBlock.macAddr[4], SysIDBlock.macAddr[5]
         );
#if MQTT_VERBOSE
      printf("MQTT: My client ID is: %s\n", broker->clientid);
#endif
   }
   // Will topic
   broker->clean_session = 1;
}

/*** BeginHeader mqtt_init_auth */
void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_init_auth <MQTT.LIB>

SYNTAX:
   void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password);

DESCRIPTION:
   Enable the authentication to connect to the broker.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   username - A string that contains the username.
PARAMETER3:
   password - A string that contains the password.

NOTE:
   Only has effect before to call mqtt_connect.

END DESCRIPTION **********************************************************/
_mqtt_debug
void mqtt_init_auth(mqtt_broker_handle_t* broker, const char* username, const char* password) {
   if(username && *username)
      strncpy(broker->username, username, sizeof(broker->username)-1);
   if(password && *password)
      strncpy(broker->password, password, sizeof(broker->password)-1);
}

/*** BeginHeader mqtt_set_alive */
void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_set_alive <MQTT.LIB>

SYNTAX:
   void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive);

DESCRIPTION:
   Set the keep alive timer.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   alive - Keep aliver timer value (in seconds).

NOTE:
   Only has effect before to call mqtt_connect.

END DESCRIPTION **********************************************************/
_mqtt_debug
void mqtt_set_alive(mqtt_broker_handle_t* broker, uint16_t alive) {
   broker->alive = alive;
}

/*** BeginHeader mqtt_connect */
int mqtt_connect(mqtt_broker_handle_t* broker);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_connect <MQTT.LIB>

SYNTAX:
   int mqtt_connect(mqtt_broker_handle_t* broker);

DESCRIPTION:
   Connect to the broker.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.

RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_connect(mqtt_broker_handle_t* broker)
{
   auto int rc;
   auto uint8_t flags = 0x00;

   auto uint16_t clientidlen;
   auto uint16_t usernamelen;
   auto uint16_t passwordlen;
   auto uint16_t payload_len;

   auto uint8_t var_header[12] = {
      0x00,0x06,
      0x4d,0x51,0x49,0x73,0x64,0x70, // Protocol name: MQIsdp.
      MQTT_PROTOCOL_VERSION          // Protocol version.
   };

   auto uint8_t fixedHeaderSize;
   auto uint8_t remainLen;

   auto uint16_t offset;
   auto uint16_t packetSize;

   auto uint8_t fixed_header[5]; // Message type, plus max four bytes.
   auto far uint8_t *packet;

   clientidlen = strlen(broker->clientid);
   payload_len = clientidlen + 2;

   if (usernamelen = strlen(broker->username)) {
      payload_len += usernamelen + 2;
      flags |= MQTT_USERNAME_FLAG;
      if (passwordlen = strlen(broker->password)) {
         payload_len += passwordlen + 2;
         flags |= MQTT_PASSWORD_FLAG;
      }
   } else {
      passwordlen = 0; // Because a password without a user name is not valid.
   }

   // Variable header.
   var_header[9] = flags;
   var_header[10] = broker->alive>>8;
   var_header[11] = broker->alive&0xFF;

   remainLen = sizeof(var_header) + payload_len;

   // Fixed header: message type + remaining length.
   fixed_header[0] = MQTT_MSG_CONNECT;
   fixedHeaderSize = 1 + mqtt_encode_len(&fixed_header[1], remainLen);

   // Now build the packet.
   packetSize = fixedHeaderSize + remainLen;
   packet =  malloc(packetSize); // TODO: compute max packet size and allocate on stack?

   _f_memcpy(packet, fixed_header, fixedHeaderSize);
   offset = fixedHeaderSize;

   _f_memcpy(packet+offset, var_header, sizeof(var_header));
   offset += sizeof(var_header);

   // Client ID - UTF encoded
   offset = mqtt_write_string(broker->clientid, packet, offset);
   if(usernamelen) {
      // Username - UTF encoded
      offset = mqtt_write_string(broker->username, packet, offset);
      if(passwordlen) {
         // Password - UTF encoded
         mqtt_write_string(broker->password, packet, offset);
      }
   }

#if MQTT_VERBOSE
   printf("MQTT: sending CONNECT (%d bytes)\n", packetSize);
   #if MQTT_VERBOSE > 2
   mem_dump(packet, packetSize);
   printf("\n");
   #endif
#endif
   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, packetSize) < packetSize) {
      rc = -1;
   } else {
      rc = 1;
   }
   free(packet);
   return rc;
}

/*** BeginHeader mqtt_disconnect */
int mqtt_disconnect(mqtt_broker_handle_t* broker);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_disconnect <MQTT.LIB>

SYNTAX:
   int mqtt_disconnect(mqtt_broker_handle_t* broker);

DESCRIPTION:
   Disconnect to the broker.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.

RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_disconnect(mqtt_broker_handle_t* broker) {
   auto uint8_t packet[] = {
      MQTT_MSG_DISCONNECT, // Message Type, DUP flag, QoS level, Retain
      0x00                 // Remaining length
   };

   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, sizeof(packet)) < sizeof(packet)) {
      return -1;
   }
   return 1;
}

/*** BeginHeader mqtt_ping */
int mqtt_ping(mqtt_broker_handle_t* broker);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_ping <MQTT.LIB>

SYNTAX:
   int mqtt_ping(mqtt_broker_handle_t* broker);

DESCRIPTION:
   Make a ping.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.

RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_ping(mqtt_broker_handle_t* broker) {
   auto uint8_t packet[] = {
      MQTT_MSG_PINGREQ, // Message Type, DUP flag, QoS level, Retain
      0x00              // Remaining length
   };

   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, sizeof(packet)) < sizeof(packet)) {
      return -1;
   }
   return 1;
}

/*** BeginHeader mqtt_publish */
int mqtt_publish(mqtt_broker_handle_t* broker, const char* topic,
      const char* msg, uint8_t retain);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_publish <MQTT.LIB>

SYNTAX:
   int mqtt_publish(mqtt_broker_handle_t* broker, const char* topic,
         const char* msg, uint8_t retain);

DESCRIPTION:
   Publish a message on a topic.
   This message will be published with 0 Qos level.

   NOTE: The response to a PUBLISH message depends on the QoS level.
         The table below shows the expected responses.

         +-----------+-------------------+
         | QoS Level | Expected response |
         +-----------+-------------------+
         | QoS 0     | None              |
         +-----------+-------------------+
         | QoS 1     | PUBACK            |
         +-----------+-------------------+
         | QoS 2     | PUBREC            |
         +-----------+-------------------+

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   topic - The topic name.
PARAMETER3:
   msg - The message.
PARAMETER4:
   retain - Enable or disable the Retain flag (values: 0 or 1).

RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_publish(mqtt_broker_handle_t* broker, const char* topic,
      const char* msg, uint8_t retain) {
   return mqtt_publish_with_qos(broker, topic, msg, retain, 0, NULL);
}

/*** BeginHeader mqtt_publish_with_qos */
int mqtt_publish_with_qos(mqtt_broker_handle_t* broker, const char* topic,
      const char* msg, uint8_t retain, uint8_t qos, uint16_t* message_id);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_publish_with_qos <MQTT.LIB>

SYNTAX:
   int mqtt_publish_with_qos(mqtt_broker_handle_t* broker, const char* topic,
         const char* msg, uint8_t retain, uint8_t qos, uint16_t* message_id);

DESCRIPTION:
   Publish a message on a topic.

   NOTE: The response to a PUBLISH message depends on the QoS level.
         The table below shows the expected responses.

         +-----------+-------------------+
         | QoS Level | Expected response |
         +-----------+-------------------+
         | QoS 0     | None              |
         +-----------+-------------------+
         | QoS 1     | PUBACK            |
         +-----------+-------------------+
         | QoS 2     | PUBREC            |
         +-----------+-------------------+

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   topic - The topic name.
PARAMETER3:
   msg - The message.
PARAMETER4:
   retain - Enable or disable the Retain flag (values: 0 or 1).
PARAMETER5:
   qos - Quality of Service (values: 0, 1 or 2).
PARAMETER6:
   message_id - Variable that will store the Message ID,
                if the pointer is not NULL.

RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_publish_with_qos(mqtt_broker_handle_t* broker, const char* topic,
      const char* msg, uint8_t retain, uint8_t qos, uint16_t* message_id) {
   auto int rc;
   auto uint16_t topiclen = strlen(topic);
   auto uint16_t msglen = strlen(msg);

   auto word varHeaderSize;
   auto far uint8_t *var_header;

   auto uint8_t fixedHeaderSize;
   auto far uint8_t *fixed_header;

   auto word packetSize;
   auto far uint8_t *packet;

   auto uint16_t remainLen;

   auto uint8_t qos_flag = MQTT_QOS0_FLAG;
   auto uint8_t qos_size = 0; // No QoS included

   if(qos == 1) {
      qos_size = 2; // 2 bytes for QoS
      qos_flag = MQTT_QOS1_FLAG;
   }
   else if(qos == 2) {
      qos_size = 2; // 2 bytes for QoS
      qos_flag = MQTT_QOS2_FLAG;
   }

   // Variable header
   varHeaderSize = topiclen+2+qos_size;
   var_header = malloc(topiclen+2+qos_size); // Topic size (2 bytes), utf-encoded topic
   _f_memset(var_header, 0, varHeaderSize);
   var_header[0] = topiclen>>8;
   var_header[1] = topiclen&0xFF;
   _f_memcpy(var_header+2, topic, topiclen);
   if(qos_size) {
      var_header[topiclen+2] = broker->seq>>8;
      var_header[topiclen+3] = broker->seq&0xFF;
      if(message_id) { // Returning message id
         *message_id = broker->seq;
      }
      broker->seq++;
   }

   // Fixed header
   // the remaining length is one byte for messages up to 127 bytes, then two bytes after that
   // actually, it can be up to 4 bytes but I'm making the assumption the embedded device will only
   // need up to two bytes of length (handles up to 16,383 (almost 16k) sized message)
   fixedHeaderSize = 2; // Default size = one byte Message Type + one byte Remaining Length
   remainLen = varHeaderSize+msglen;
   if (remainLen > 127) {
      fixedHeaderSize++; // add an additional byte for Remaining Length
   }
   fixed_header = malloc(fixedHeaderSize);

   // Message Type, DUP flag, QoS level, Retain
   fixed_header[0] = MQTT_MSG_PUBLISH | qos_flag;
   if(retain) {
      fixed_header[0] |= MQTT_RETAIN_FLAG;
   }
   // Remaining Length
   if (remainLen <= 127) {
      fixed_header[1] = remainLen;
   } else {
      // first byte is remainder (mod) of 128, then set the MSB to indicate more bytes
      fixed_header[1] = remainLen % 128;
      fixed_header[1] = fixed_header[1] | 0x80;
      // second byte is number of 128s
      fixed_header[2] = remainLen / 128;
   }

   packetSize = fixedHeaderSize+varHeaderSize+msglen;
   packet = malloc(packetSize);
   _f_memset(packet, 0, packetSize);

   _f_memcpy(packet, fixed_header, fixedHeaderSize);
   free(fixed_header);

   _f_memcpy(packet+fixedHeaderSize, var_header, varHeaderSize);
   free(var_header);

   _f_memcpy(packet+fixedHeaderSize+varHeaderSize, msg, msglen);

#if MQTT_VERBOSE
   printf("MQTT: sending PUBLISH (%d bytes)\n", packetSize);
   #if MQTT_VERBOSE > 2
   mem_dump(packet, packetSize);
   printf("\n");
   #endif
#endif
   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, packetSize) < packetSize) {
      rc = -1;
   } else {
      rc = 1;
   }
   free(packet);
   return rc;
}

/*** BeginHeader mqtt_pubrel */
int mqtt_pubrel(mqtt_broker_handle_t* broker, uint16_t message_id);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_pubrel <MQTT.LIB>

SYNTAX:
   int mqtt_pubrel(mqtt_broker_handle_t* broker, uint16_t message_id);

DESCRIPTION:
   Send a PUBREL message. It's used for PUBLISH message with 2 QoS level.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   message_id - Message ID.

   RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.

END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_pubrel(mqtt_broker_handle_t* broker, uint16_t message_id) {
   uint8_t packet[4] = {
      MQTT_MSG_PUBREL | MQTT_QOS1_FLAG, // Type, DUP flag, QoS level, Retain.
      0x02                              // Remaining length
   };
   packet[2] = message_id>>8;
   packet[3] = message_id&0xFF;

   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, sizeof(packet)) < sizeof(packet)) {
      return -1;
   }
   return 1;
}

/*** BeginHeader mqtt_subscribe */
int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic,
      uint16_t* message_id);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_subscribe <MQTT.LIB>

SYNTAX:
   int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic,
         uint16_t* message_id);

DESCRIPTION:
   Subscribe to a topic.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   topic - The topic name.
PARAMETER2:
   message_id - Variable that will store the Message ID,
                if the pointer is not NULL.

   RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.
END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_subscribe(mqtt_broker_handle_t* broker, const char* topic,
      uint16_t* message_id)
{
   auto int rc;
   auto uint16_t topiclen;
   auto uint8_t var_header[2]; // Message ID
   auto uint8_t fixed_header[2] = {
      MQTT_MSG_SUBSCRIBE | MQTT_QOS1_FLAG // Message Type, DUP flag, QoS level, Retain
   };

   auto far uint8_t *utf_topic;

   auto word packetSize;
   auto far uint8_t *packet;

   topiclen = strlen(topic);

   // Variable header
   var_header[0] = broker->seq>>8;
   var_header[1] = broker->seq&0xFF;

   if(message_id) { // Returning message id
      *message_id = broker->seq;
   }
   broker->seq++;

   // utf topic
   utf_topic = malloc(topiclen+3); // Topic size (2 bytes), utf-encoded topic, QoS byte
   _f_memset(utf_topic, 0, topiclen+3);
   utf_topic[0] = topiclen>>8;
   utf_topic[1] = topiclen&0xFF;
   _f_memcpy(utf_topic+2, topic, topiclen);

   // Fixed header
   fixed_header[1] = sizeof(var_header)+topiclen+3;

   packetSize = sizeof(fixed_header)+sizeof(var_header)+topiclen+3;
   packet = malloc(packetSize);
   _f_memset(packet, 0, packetSize);
   _f_memcpy(packet, fixed_header, sizeof(fixed_header));
   _f_memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
   _f_memcpy(packet+sizeof(fixed_header)+sizeof(var_header), utf_topic, topiclen+3);
   free(utf_topic);

   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, packetSize) < packetSize) {
      rc = -1;
   } else {
      rc = 1;
   }
   free(packet);
   return rc;
}

/*** BeginHeader mqtt_unsubscribe */
int mqtt_unsubscribe(mqtt_broker_handle_t* broker, const char* topic,
      uint16_t* message_id);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
mqtt_unsubscribe <MQTT.LIB>

SYNTAX:
   int mqtt_unsubscribe(mqtt_broker_handle_t* broker, const char* topic,
         uint16_t* message_id));

DESCRIPTION:
   Unsubscribe from a topic.

PARAMETER1:
   broker - Data structure that contains the connection information
   with the broker.
PARAMETER2:
   topic - The topic name.
PARAMETER2:
   message_id - Variable that will store the Message ID,
                if the pointer is not NULL.

   RETURN VALUE:
    1 On success.
    0 On connection error.
   -1 On IO error.
END DESCRIPTION **********************************************************/
_mqtt_debug
int mqtt_unsubscribe(mqtt_broker_handle_t* broker, const char* topic,
      uint16_t* message_id)
{
   auto int rc;
   auto uint16_t topiclen;

   auto uint8_t var_header[2]; // Message ID

   auto far uint8_t *utf_topic;

   auto uint8_t fixed_header[2] = {
      MQTT_MSG_UNSUBSCRIBE | MQTT_QOS1_FLAG // Message Type, DUP flag, QoS level, Retain
   };

   auto word packetSize;
   auto far uint8_t *packet;

   topiclen = strlen(topic);
   // Variable header
   var_header[0] = broker->seq>>8;
   var_header[1] = broker->seq&0xFF;
   if(message_id) { // Returning message id
      *message_id = broker->seq;
   }
   broker->seq++;

   // utf topic
   utf_topic = malloc(topiclen+2); // Topic size (2 bytes), utf-encoded topic
   _f_memset(utf_topic, 0, topiclen+2);
   utf_topic[0] = topiclen>>8;
   utf_topic[1] = topiclen&0xFF;
   _f_memcpy(utf_topic+2, topic, topiclen);

   // Fixed header
   fixed_header[1] = sizeof(var_header)+topiclen+2;

   packetSize = sizeof(var_header)+sizeof(fixed_header)+topiclen+2;
   packet = malloc(packetSize);
   _f_memset(packet, 0, packetSize);
   _f_memcpy(packet, fixed_header, sizeof(fixed_header));
   _f_memcpy(packet+sizeof(fixed_header), var_header, sizeof(var_header));
   _f_memcpy(packet+sizeof(fixed_header)+sizeof(var_header), utf_topic, topiclen+2);
   free(utf_topic);

   // Send the packet
   if(broker->send(_SOCK_OF_MQTT(broker), packet, packetSize) < packetSize) {
      rc = -1;
   } else {
      rc = 1;
   }
   free(packet);
   return rc;
}

/*** BeginHeader send_packet */
int send_packet(void* socket_info, const void far *buf, int count);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
send_packet <MQTT.LIB>
END DESCRIPTION **********************************************************/
_mqtt_debug
int send_packet(void* socket_info, const void far *buf, int count) {
   auto int bytes_written;
   // Note that function sock_write BUSY WAITS until either the buffer is
   // completely written or a socket error occurs.
   sock_flushnext(socket_info);
   bytes_written = sock_write(socket_info, buf, count);
   if (bytes_written == count) {
      sock_flush(socket_info);
   }
   return bytes_written;
}

/*** BeginHeader init_socket */
int init_socket(mqtt_broker_handle_t* broker, const char* hostname, short port);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
init_socket <MQTT.LIB>
END DESCRIPTION **********************************************************/
_mqtt_debug
int init_socket(mqtt_broker_handle_t* broker, const char* hostname, short port) {
   auto longword ip;
   auto int flag = 1;
   auto int keepalive = 3; // Seconds

   if(hostname && *hostname) {
      strncpy(broker->host, hostname, sizeof(broker->host)-1);
   }
   broker->port = port;

   // TODO: Create the socket?

   // Disable Nagle Algorithm
   tcp_set_nonagle(_SOCK_OF_MQTT(broker));
   tcp_keepalive(_SOCK_OF_MQTT(broker), keepalive);

   ip = resolve(broker->host); // NOTE: this function blocks!
   if (!tcp_open(_SOCK_OF_MQTT(broker), 0, ip, broker->port, NULL)) {
      return -1;
   }
   // MQTT stuffs.
   mqtt_set_alive(broker, keepalive);
   broker->send = send_packet;

   return ENONE;
}

/*** BeginHeader close_socket */
int close_socket(mqtt_broker_handle_t* broker);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
close_socket <MQTT.LIB>
END DESCRIPTION **********************************************************/
_mqtt_debug
int close_socket(mqtt_broker_handle_t* broker) {
   int fd = *((int*)broker->socket_info);
   return close(fd);
}

/*** BeginHeader read_packet */
int read_packet(void* socket_info, const void far *buf, int count);
/*** EndHeader  */
/* START FUNCTION DESCRIPTION ********************************************
read_packet <MQTT.LIB>
END DESCRIPTION **********************************************************/
int read_packet(void* socket_info, const void far *buf, int count) {
   auto int packet_length;
   far auto uint8_t *packet_buffer;

   packet_buffer = (far uint8_t *)buf;
   // TODO: Error if count < 2.

   // Reading fixed header
   if (sock_read(socket_info, packet_buffer, 2) != 2) {
      return -1;
   }
   packet_length = packet_buffer[1] + 2; // Remaining length + fixed header length

   // Reading the packet
   if (sock_read(socket_info, packet_buffer+2, count-2) < 0) {
     return -1;
   }

   return packet_length;
}

/*** BeginHeader */
#endif // __MQTT_LIB
/*** EndHeader */

